// Generated by dust2 (version 0.3.16) - do not edit

#include <dust2/common.hpp>

// [[dust2::class(bounce)]]
// [[dust2::time_type(continuous)]]
// [[dust2::parameter(height, rank = 0)]]
// [[dust2::parameter(velocity, rank = 0)]]
class bounce {
public:
  bounce() = delete;

  using real_type = double;

  struct shared_state {
    real_type g;
    real_type height;
    real_type velocity;
    real_type damp;
  };

  struct internal_state {};

  using rng_state_type = monty::random::generator<real_type>;

  static dust2::packing packing_state(const shared_state& shared) {
    return dust2::packing{{"height", {}}, {"velocity", {}}};
  }

  static void initial(real_type time,
                      const shared_state& shared,
                      internal_state& internal,
                      rng_state_type& rng_state,
                      real_type * state) {
    state[0] = shared.height;
    state[1] = shared.velocity;
  }

  static void rhs(real_type time,
                  const real_type * state,
                  const shared_state& shared,
                  internal_state& internal,
                  real_type * state_deriv) {
    state_deriv[0] = state[1];
    state_deriv[1] = -shared.g;
  }

  static shared_state build_shared(cpp11::list pars) {
    const real_type g = 9.8;
    const real_type height = dust2::r::read_real(pars, "height", 0);
    const real_type velocity = dust2::r::read_real(pars, "velocity", 10);
    const real_type damp = dust2::r::read_real(pars, "damp", 0.9);
    return shared_state{g, height, velocity, damp};
  }

  static void update_shared(cpp11::list pars, shared_state& shared) {
    shared.damp = dust2::r::read_real(pars, "damp", shared.damp);
  }

  static auto events(const shared_state& shared, internal_state& internal) {

    /// @brief Check if ball is at 5m.
    auto test = [&](const double t, const double *y) {
        double diff = 0.0;
        diff = y[0] - 5.0;

        return diff;
    };

    auto action = [&](const double t, const double sign, double* y) {
      y[0] = 5.0;
      y[1] = -shared.damp * y[1];
    };
    dust2::ode::event<real_type> e({0}, test, action);
    return dust2::ode::events_type<real_type>({e});
  }
};

#include <cpp11.hpp>
#include <dust2/r/continuous/system.hpp>

[[cpp11::register]]
SEXP dust2_system_bounce_alloc(cpp11::list r_pars, cpp11::sexp r_time, cpp11::list r_time_control, cpp11::sexp r_n_particles, cpp11::sexp r_n_groups, cpp11::sexp r_seed, cpp11::sexp r_deterministic, cpp11::sexp r_n_threads) {
  return dust2::r::dust2_continuous_alloc<bounce>(r_pars, r_time, r_time_control, r_n_particles, r_n_groups, r_seed, r_deterministic, r_n_threads);
}

[[cpp11::register]]
SEXP dust2_system_bounce_internals(cpp11::sexp ptr, bool include_coefficients, bool include_history) {
  return dust2::r::dust2_system_internals<dust2::dust_continuous<bounce>>(ptr, include_coefficients, include_history);
}
[[cpp11::register]]
SEXP dust2_system_bounce_run_to_time(cpp11::sexp ptr, cpp11::sexp r_time) {
  return dust2::r::dust2_system_run_to_time<dust2::dust_continuous<bounce>>(ptr, r_time);
}

[[cpp11::register]]
SEXP dust2_system_bounce_state(cpp11::sexp ptr, cpp11::sexp r_index_state, cpp11::sexp r_index_particle, cpp11::sexp r_index_group, bool preserve_particle_dimension, bool preserve_group_dimension) {
  return dust2::r::dust2_system_state<dust2::dust_continuous<bounce>>(ptr, r_index_state, r_index_particle, r_index_group, preserve_particle_dimension, preserve_group_dimension);
}

[[cpp11::register]]
SEXP dust2_system_bounce_time(cpp11::sexp ptr) {
  return dust2::r::dust2_system_time<dust2::dust_continuous<bounce>>(ptr);
}

[[cpp11::register]]
SEXP dust2_system_bounce_set_state_initial(cpp11::sexp ptr) {
  return dust2::r::dust2_system_set_state_initial<dust2::dust_continuous<bounce>>(ptr);
}

[[cpp11::register]]
SEXP dust2_system_bounce_set_state(cpp11::sexp ptr, cpp11::list r_state) {
  return dust2::r::dust2_system_set_state<dust2::dust_continuous<bounce>>(ptr, r_state);
}

[[cpp11::register]]
SEXP dust2_system_bounce_reorder(cpp11::sexp ptr, cpp11::integers r_index) {
  return dust2::r::dust2_system_reorder<dust2::dust_continuous<bounce>>(ptr, r_index);
}

[[cpp11::register]]
SEXP dust2_system_bounce_rng_state(cpp11::sexp ptr) {
  return dust2::r::dust2_system_rng_state<dust2::dust_continuous<bounce>>(ptr);
}

[[cpp11::register]]
SEXP dust2_system_bounce_set_rng_state(cpp11::sexp ptr, cpp11::sexp r_rng_state) {
  return dust2::r::dust2_system_set_rng_state<dust2::dust_continuous<bounce>>(ptr, r_rng_state);
}

[[cpp11::register]]
SEXP dust2_system_bounce_set_time(cpp11::sexp ptr, cpp11::sexp r_time) {
  return dust2::r::dust2_system_set_time<dust2::dust_continuous<bounce>>(ptr, r_time);
}

[[cpp11::register]]
SEXP dust2_system_bounce_update_pars(cpp11::sexp ptr, cpp11::list pars) {
  return dust2::r::dust2_system_update_pars<dust2::dust_continuous<bounce>>(ptr, pars);
}

[[cpp11::register]]
SEXP dust2_system_bounce_simulate(cpp11::sexp ptr, cpp11::sexp r_times, cpp11::sexp r_index_state, bool preserve_particle_dimension, bool preserve_group_dimension) {
  return dust2::r::dust2_system_simulate<dust2::dust_continuous<bounce>>(ptr, r_times, r_index_state, preserve_particle_dimension, preserve_group_dimension);
}
